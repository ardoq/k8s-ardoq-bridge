---
# This workflow is triggered whenever we release a new version of Starboard
# by creating an annotated Git tag and pushing it to the upstream Git repository.
#
#    git tag -a v0.0.1 -m 'Release v0.0.1'
#    git push upstream v0.0.1
name: Release
on:
  push:
    tags:
      - "v*"
env:
  GO_VERSION: "1.17"
  KIND_VERSION: "v0.11.1"

jobs:
  ardoq-integration-tests:
    name: Run ardoq integration tests
    runs-on: ubuntu-20.04
    environment: "GITHUB CI"
    steps:
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Run ardoq-integration-tests
        run: make ardoq-integration-tests
        env:
          ARDOQ_BASEURI: ${{ secrets.ARDOQ_BASEURI }}
          ARDOQ_ORG: ${{ secrets.ARDOQ_ORG }}
          ARDOQ_WORKSPACE_ID: ${{ secrets.ARDOQ_WORKSPACE_ID }}
          ARDOQ_APIKEY: ${{ secrets.ARDOQ_APIKEY }}
          ARDOQ_CLUSTER: ${{ secrets.ARDOQ_CLUSTER }}
  k8s-integration-tests:
    name: Run kubernetes integration tests
    needs:
      - ardoq-integration-tests
    runs-on: ubuntu-20.04
    environment: "GITHUB CI"
    timeout-minutes: 15
    steps:
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Setup Kubernetes cluster (KIND)
        uses: engineerd/setup-kind@v0.5.0
        with:
          version: ${{ env.KIND_VERSION }}
          image: ${{ env.KIND_IMAGE }}
          name: kind-test
      - name: Test connection to Kubernetes cluster
        run: |
          kubectl cluster-info
          kubectl wait --for=condition=Ready nodes --all --timeout=300s
          kubectl describe node
      - name: Run k8s-integration-tests
        run: |
          make k8s-integration-tests
        env:
          KUBECONFIG: /home/runner/.kube/config
          ARDOQ_BASEURI: ${{ secrets.ARDOQ_BASEURI }}
          ARDOQ_ORG: ${{ secrets.ARDOQ_ORG }}
          ARDOQ_WORKSPACE_ID: ${{ secrets.ARDOQ_WORKSPACE_ID }}
          ARDOQ_APIKEY: ${{ secrets.ARDOQ_APIKEY }}
          ARDOQ_CLUSTER: ${{ secrets.ARDOQ_CLUSTER }}
  release:
    name: Release
    needs:
      - k8s-integration-tests
    runs-on: ubuntu-20.04
    environment: "GITHUB CI"
    steps:
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set output
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}
      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true
      - name: Login to docker.io registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push to Dockerhub
        uses: docker/build-push-action@v2
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ardoq/k8s-ardoq-bridge:latest,ardoq/k8s-ardoq-bridge:${{ steps.vars.outputs.tag }}
      - name: Release
        uses: goreleaser/goreleaser-action@v2
        with:
          version: v1.1.0
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
