name: Build

on:
  push:
    branches:
      - main
    paths-ignore:
      - '*.md'
      - 'docs/**'
  pull_request:
    branches:
      - main
    paths-ignore:
        - '*.md'
        - 'docs/**'
  workflow_dispatch:

env:
  GO_VERSION: "1.17"
  KIND_VERSION: "v0.11.1"
  CHART_DIR: chart

jobs:
  verify-code:
    name: Verify code
    runs-on: ubuntu-20.04
    steps:
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Cached Go dependencies
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Verify Go code
        uses: golangci/golangci-lint-action@v2
        with:
          args: --verbose
          version: latest
          skip-pkg-cache: true
          skip-build-cache: true
      - name: Vendor Go modules
        run: go mod vendor
  unit-tests:
    name: Run unit tests
    runs-on: ubuntu-20.04
    environment: "GITHUB CI"
    env:
      ARDOQ_BASEURI: ${{ secrets.ARDOQ_BASEURI }}
      ARDOQ_ORG: ${{ secrets.ARDOQ_ORG }}
      ARDOQ_WORKSPACE_ID: ${{ secrets.ARDOQ_WORKSPACE_ID }}
      ARDOQ_APIKEY: ${{ secrets.ARDOQ_APIKEY }}
      ARDOQ_CLUSTER: ${{ secrets.ARDOQ_CLUSTER }}
    steps:
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Run unit tests
        run: make unit-tests
#      - name: Upload code coverage
#        uses: codecov/codecov-action@v2
#        with:
#          files: ./coverage.txt
  #todo: enhance with kubernetes related tests
  integration-tests:
    name: Run integration tests
    needs:
      - unit-tests
      - verify-code
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    steps:
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Setup Kubernetes cluster (KIND)
        uses: engineerd/setup-kind@v0.5.0
        with:
          version: ${{ env.KIND_VERSION }}
          image: ${{ env.KIND_IMAGE }}
          name: kind-test
      - name: Test connection to Kubernetes cluster
        run: |
          kubectl cluster-info
          kubectl wait --for=condition=Ready nodes --all --timeout=300s
          kubectl describe node
#      - name: Run integration tests
#        run: |
#          make integration-tests
#        env:
#          KUBECONFIG: /home/runner/.kube/config
#      - name: Upload code coverage
#        uses: codecov/codecov-action@v2
#        with:
#          files: ./tests/integrations/ardoq/coverage.txt
  test-helm-chart:
    name: Test Helm Chart
    needs:
      - integration-tests
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0
      - name: Install Helm
        uses: azure/setup-helm@v1.1
        with:
          version: v3.5.0
      - name: Set up python
        uses: actions/setup-python@v2.3.0
        with:
          python-version: 3.7
      - name: Setup Chart Linting
        id: lint
        uses: helm/chart-testing-action@v2.1.0
      - name: Setup Kubernetes cluster (KIND)
        uses: helm/kind-action@v1.2.0
        with:
          version: ${{ env.KIND_VERSION }}
      - name: Run chart-testing
        run: ct lint --validate-maintainers=false --charts ${{ env.CHART_DIR }}
  release-snapshot:
    name: Release unversioned snapshot
    needs:
      - integration-tests
    runs-on: ubuntu-20.04
    steps:
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Release snapshot
        uses: goreleaser/goreleaser-action@v2
        with:
          version: v1.1.0
          args: release --snapshot --skip-publish --rm-dist
